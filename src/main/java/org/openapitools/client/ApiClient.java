/*
 * NUSMods API
 * NUSMods API contains data used to render <https://nusmods.com>. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar's Office.  The API consists of static JSON files scraped daily from the school's APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: <https://telegram.me/nusmods> - **Mailing list**: <nusmods@googlegroups.com> (for security related issues please email <mods@nusmods.com> instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: <https://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts> - Venue types: <https://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts>  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \"timetable\": [     {       \"classNo\": \"1\",       \"lessonType\": \"Lecture\",       \"weeks\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \"day\": \"Tuesday\",       \"startTime\": \"1600\",       \"endTime\": \"1800\",       \"venue\": \"I3-AUD\"     },     {       \"classNo\": \"01\",       \"lessonType\": \"Tutorial\",       \"weeks\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \"day\": \"Wednesday\",       \"startTime\": \"1100\",       \"endTime\": \"1200\",       \"venue\": \"COM1-0207\"     },     {       \"classNo\": \"02\",       \"lessonType\": \"Tutorial\",       \"weeks\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \"day\": \"Friday\",       \"startTime\": \"0900\",       \"endTime\": \"1000\",       \"venue\": \"COM1-0209\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \"timetable\": [     {       \"classNo\": \"1\",       \"lessonType\": \"Lecture\",       \"weeks\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \"day\": \"Tuesday\",       \"startTime\": \"1600\",       \"endTime\": \"1800\",       \"venue\": \"I3-AUD\"     },     {       \"classNo\": \"1\",       \"lessonType\": \"Lecture\",       \"weeks\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \"day\": \"Wednesday\",       \"startTime\": \"1400\",       \"endTime\": \"1500\",       \"venue\": \"I3-AUD\"     },     {       \"classNo\": \"2\",       \"lessonType\": \"Lecture\",       \"weeks\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \"day\": \"Monday\",       \"startTime\": \"1000\",       \"endTime\": \"1200\",       \"venue\": \"I3-AUD\"     },     {       \"classNo\": \"2\",       \"lessonType\": \"Lecture\",       \"weeks\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \"day\": \"Wednesday\",       \"startTime\": \"1500\",       \"endTime\": \"1600\",       \"venue\": \"I3-AUD\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \"weeks\": {   \"start\": \"2019-01-17\",   \"end\": \"2019-04-18\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \"weeks\": {   \"start\": \"2019-01-17\",   \"end\": \"2019-02-21\",   \"weeks\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \"weeks\": {   \"start\": \"2019-01-17\",   \"end\": \"2019-02-28\",   \"weekInterval\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like 'taken A-level H2 math' or '70 MCs and above'.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \"and\": [     \"CS1231\",     {       \"or\": [\"CS1010S\", \"CS1010X\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: nusmods@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client;

import static java.nio.charset.StandardCharsets.UTF_8;

import java.io.InputStream;
import java.net.URI;
import java.net.URLEncoder;
import java.net.http.HttpClient;
import java.net.http.HttpConnectTimeoutException;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.StringJoiner;
import java.util.function.Consumer;
import java.util.stream.Collectors;

import org.openapitools.jackson.nullable.JsonNullableModule;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;

/**
 * Configuration and utility class for API clients.
 *
 * <p>This class can be constructed and modified, then used to instantiate the
 * various API classes. The API classes use the settings in this class to configure themselves, but otherwise do not
 * store a link to this class.</p>
 *
 * <p>This class is mutable and not synchronized, so it is not thread-safe.
 * The API classes generated from this are immutable and thread-safe.</p>
 *
 * <p>The setter methods of this class return the current object to facilitate
 * a fluent style of configuration.</p>
 */
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-03T22:22:26.802458+08:00[Asia/Singapore]")
public class ApiClient {

    private HttpClient.Builder builder;
    private ObjectMapper mapper;
    private String scheme;
    private String host;
    private int port;
    private String basePath;
    private Consumer<HttpRequest.Builder> interceptor;
    private Consumer<HttpResponse<InputStream>> responseInterceptor;
    private Consumer<HttpResponse<String>> asyncResponseInterceptor;
    private Duration readTimeout;
    private Duration connectTimeout;

    /**
     * Create an instance of ApiClient.
     */
    public ApiClient() {
        this.builder = createDefaultHttpClientBuilder();
        this.mapper = createDefaultObjectMapper();
        updateBaseUri(getDefaultBaseUri());
        interceptor = null;
        readTimeout = null;
        connectTimeout = null;
        responseInterceptor = null;
        asyncResponseInterceptor = null;
    }

    /**
     * Create an instance of ApiClient.
     *
     * @param builder Http client builder.
     * @param mapper  Object mapper.
     * @param baseUri Base URI
     */
    public ApiClient(HttpClient.Builder builder, ObjectMapper mapper, String baseUri) {
        this.builder = builder;
        this.mapper = mapper;
        updateBaseUri(baseUri != null ? baseUri : getDefaultBaseUri());
        interceptor = null;
        readTimeout = null;
        connectTimeout = null;
        responseInterceptor = null;
        asyncResponseInterceptor = null;
    }

    private static String valueToString(Object value) {
        if (value == null) {
            return "";
        }
        if (value instanceof OffsetDateTime) {
            return ((OffsetDateTime) value).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }
        return value.toString();
    }

    /**
     * URL encode a string in the UTF-8 encoding.
     *
     * @param s String to encode.
     * @return URL-encoded representation of the input string.
     */
    public static String urlEncode(String s) {
        return URLEncoder.encode(s, UTF_8).replaceAll("\\+", "%20");
    }

    /**
     * Convert a URL query name/value parameter to a list of encoded {@link Pair} objects.
     *
     * <p>The value can be null, in which case an empty list is returned.</p>
     *
     * @param name  The query name parameter.
     * @param value The query value, which may not be a collection but may be null.
     * @return A singleton list of the {@link Pair} objects representing the input parameters, which is encoded for use
     * in a URL. If the value is null, an empty list is returned.
     */
    public static List<Pair> parameterToPairs(String name, Object value) {
        if (name == null || name.isEmpty() || value == null) {
            return Collections.emptyList();
        }
        return Collections.singletonList(new Pair(urlEncode(name), urlEncode(valueToString(value))));
    }

    /**
     * Convert a URL query name/collection parameter to a list of encoded {@link Pair} objects.
     *
     * @param collectionFormat The swagger collectionFormat string (csv, tsv, etc).
     * @param name             The query name parameter.
     * @param values           A collection of values for the given query name, which may be null.
     * @return A list of {@link Pair} objects representing the input parameters, which is encoded for use in a URL. If
     * the values collection is null, an empty list is returned.
     */
    public static List<Pair> parameterToPairs(
        String collectionFormat, String name, Collection<?> values) {
        if (name == null || name.isEmpty() || values == null || values.isEmpty()) {
            return Collections.emptyList();
        }

        // get the collection format (default: csv)
        String format = collectionFormat == null || collectionFormat.isEmpty() ? "csv" : collectionFormat;

        // create the params based on the collection format
        if ("multi".equals(format)) {
            return values.stream()
                .map(value -> new Pair(urlEncode(name), urlEncode(valueToString(value))))
                .collect(Collectors.toList());
        }

        String delimiter;
        switch (format) {
        case "csv":
            delimiter = urlEncode(",");
            break;
        case "ssv":
            delimiter = urlEncode(" ");
            break;
        case "tsv":
            delimiter = urlEncode("\t");
            break;
        case "pipes":
            delimiter = urlEncode("|");
            break;
        default:
            throw new IllegalArgumentException("Illegal collection format: " + collectionFormat);
        }

        StringJoiner joiner = new StringJoiner(delimiter);
        for (Object value : values) {
            joiner.add(urlEncode(valueToString(value)));
        }

        return Collections.singletonList(new Pair(urlEncode(name), joiner.toString()));
    }

    protected ObjectMapper createDefaultObjectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        mapper.configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false);
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        mapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);
        mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);
        mapper.disable(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE);
        mapper.registerModule(new JavaTimeModule());
        mapper.registerModule(new JsonNullableModule());
        return mapper;
    }

    protected String getDefaultBaseUri() {
        return "https://api.nusmods.com/v2";
    }

    protected HttpClient.Builder createDefaultHttpClientBuilder() {
        return HttpClient.newBuilder();
    }

    public void updateBaseUri(String baseUri) {
        URI uri = URI.create(baseUri);
        scheme = uri.getScheme();
        host = uri.getHost();
        port = uri.getPort();
        basePath = uri.getRawPath();
    }

    /**
     * Set a custom {@link HttpClient.Builder} object to use when creating the {@link HttpClient} that is used by the
     * API client.
     *
     * @param builder Custom client builder.
     * @return This object.
     */
    public ApiClient setHttpClientBuilder(HttpClient.Builder builder) {
        this.builder = builder;
        return this;
    }

    /**
     * Get an {@link HttpClient} based on the current {@link HttpClient.Builder}.
     *
     * <p>The returned object is immutable and thread-safe.</p>
     *
     * @return The HTTP client.
     */
    public HttpClient getHttpClient() {
        return builder.build();
    }

    /**
     * Get a copy of the current {@link ObjectMapper}.
     *
     * @return A copy of the current object mapper.
     */
    public ObjectMapper getObjectMapper() {
        return mapper.copy();
    }

    /**
     * Set a custom {@link ObjectMapper} to serialize and deserialize the request and response bodies.
     *
     * @param mapper Custom object mapper.
     * @return This object.
     */
    public ApiClient setObjectMapper(ObjectMapper mapper) {
        this.mapper = mapper;
        return this;
    }

    /**
     * Set a custom host name for the target service.
     *
     * @param host The host name of the target service.
     * @return This object.
     */
    public ApiClient setHost(String host) {
        this.host = host;
        return this;
    }

    /**
     * Set a custom port number for the target service.
     *
     * @param port The port of the target service. Set this to -1 to reset the value to the default for the scheme.
     * @return This object.
     */
    public ApiClient setPort(int port) {
        this.port = port;
        return this;
    }

    /**
     * Set a custom base path for the target service, for example '/v2'.
     *
     * @param basePath The base path against which the rest of the path is resolved.
     * @return This object.
     */
    public ApiClient setBasePath(String basePath) {
        this.basePath = basePath;
        return this;
    }

    /**
     * Get the base URI to resolve the endpoint paths against.
     *
     * @return The complete base URI that the rest of the API parameters are resolved against.
     */
    public String getBaseUri() {
        return scheme + "://" + host + (port == -1 ? "" : ":" + port) + basePath;
    }

    /**
     * Set a custom scheme for the target service, for example 'https'.
     *
     * @param scheme The scheme of the target service
     * @return This object.
     */
    public ApiClient setScheme(String scheme) {
        this.scheme = scheme;
        return this;
    }

    /**
     * Get the custom interceptor.
     *
     * @return The custom interceptor that was set, or null if there isn't any.
     */
    public Consumer<HttpRequest.Builder> getRequestInterceptor() {
        return interceptor;
    }

    /**
     * Set a custom request interceptor.
     *
     * <p>A request interceptor is a mechanism for altering each request before it
     * is sent. After the request has been fully configured but not yet built, the request builder is passed into this
     * function for further modification, after which it is sent out.</p>
     *
     * <p>This is useful for altering the requests in a custom manner, such as
     * adding headers. It could also be used for logging and monitoring.</p>
     *
     * @param interceptor A function invoked before creating each request. A value of null resets the interceptor to a
     *                    no-op.
     * @return This object.
     */
    public ApiClient setRequestInterceptor(Consumer<HttpRequest.Builder> interceptor) {
        this.interceptor = interceptor;
        return this;
    }

    /**
     * Get the custom response interceptor.
     *
     * @return The custom interceptor that was set, or null if there isn't any.
     */
    public Consumer<HttpResponse<InputStream>> getResponseInterceptor() {
        return responseInterceptor;
    }

    /**
     * Set a custom response interceptor.
     *
     * <p>This is useful for logging, monitoring or extraction of header variables</p>
     *
     * @param interceptor A function invoked before creating each request. A value of null resets the interceptor to a
     *                    no-op.
     * @return This object.
     */
    public ApiClient setResponseInterceptor(Consumer<HttpResponse<InputStream>> interceptor) {
        this.responseInterceptor = interceptor;
        return this;
    }

    /**
     * Get the custom async response interceptor. Use this interceptor when asyncNative is set to 'true'.
     *
     * @return The custom interceptor that was set, or null if there isn't any.
     */
    public Consumer<HttpResponse<String>> getAsyncResponseInterceptor() {
        return asyncResponseInterceptor;
    }

    /**
     * Set a custom async response interceptor. Use this interceptor when asyncNative is set to 'true'.
     *
     * <p>This is useful for logging, monitoring or extraction of header variables</p>
     *
     * @param interceptor A function invoked before creating each request. A value of null resets the interceptor to a
     *                    no-op.
     * @return This object.
     */
    public ApiClient setAsyncResponseInterceptor(Consumer<HttpResponse<String>> interceptor) {
        this.asyncResponseInterceptor = interceptor;
        return this;
    }

    /**
     * Get the read timeout that was set.
     *
     * @return The read timeout, or null if no timeout was set. Null represents an infinite wait time.
     */
    public Duration getReadTimeout() {
        return readTimeout;
    }

    /**
     * Set the read timeout for the http client.
     *
     * <p>This is the value used by default for each request, though it can be
     * overridden on a per-request basis with a request interceptor.</p>
     *
     * @param readTimeout The read timeout used by default by the http client. Setting this value to null resets the
     *                    timeout to an effectively infinite value.
     * @return This object.
     */
    public ApiClient setReadTimeout(Duration readTimeout) {
        this.readTimeout = readTimeout;
        return this;
    }

    /**
     * Get connection timeout (in milliseconds).
     *
     * @return Timeout in milliseconds
     */
    public Duration getConnectTimeout() {
        return connectTimeout;
    }

    /**
     * Sets the connect timeout (in milliseconds) for the http client.
     *
     * <p> In the case where a new connection needs to be established, if
     * the connection cannot be established within the given {@code duration}, then {@link HttpClient#send(HttpRequest,
     * BodyHandler) HttpClient::send} throws an {@link HttpConnectTimeoutException}, or {@link
     * HttpClient#sendAsync(HttpRequest, BodyHandler) HttpClient::sendAsync} completes exceptionally with an {@code
     * HttpConnectTimeoutException}. If a new connection does not need to be established, for example if a connection
     * can be reused from a previous request, then this timeout duration has no effect.
     *
     * @param connectTimeout connection timeout in milliseconds
     * @return This object.
     */
    public ApiClient setConnectTimeout(Duration connectTimeout) {
        this.connectTimeout = connectTimeout;
        this.builder.connectTimeout(connectTimeout);
        return this;
    }
}
