@startuml
!include style.puml
skinparam noteTextAlignment left

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":TrackOParser" as TrackOParser LOGIC_COLOR
participant "parser:FindOrderCommandParser" as FindOrderCommandParser LOGIC_COLOR
participant "predicate:OrderMatchesFlagsAndPrefixPredicate" as OrderMatchesFlagsAndPrefixPredicate LOGIC_COLOR
participant "command:FindOrderCommand" as FindOrderCommand LOGIC_COLOR
participant "result:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "model:Model" as Model MODEL_COLOR

end box

[-> LogicManager : execute("findo -D -p n/Alex a/Serangoon")
activate LogicManager

LogicManager -> TrackOParser : parseCommand("findo -D -p n/Alex a/Serangoon")
activate TrackOParser

create FindOrderCommandParser
TrackOParser -> FindOrderCommandParser
activate FindOrderCommandParser

FindOrderCommandParser --> TrackOParser : parser
deactivate FindOrderCommandParser

TrackOParser -> FindOrderCommandParser : parse("-D -p n/Alex a/Serangoon")
activate FindOrderCommandParser

note right
//(omitted to reduce diagram complexity)//
**parse** method argument is processed as follows:
* separated into prefixes ("n/","p/", etc) using the ArgumentTokenizer class,
* have accompanying values (John Doe, Banana, 5, etc)
encapsulated in relevant data classes (Name, Phone, etc)
* passed as arguments for Order instantiation
end note

create OrderMatchesFlagsAndPrefixPredicate
FindOrderCommandParser -> OrderMatchesFlagsAndPrefixPredicate: OrderMatchesFlagsAndPrefixPredicate(["Alex"], \n["Serangoon"], [], true, true, true, false)
activate OrderMatchesFlagsAndPrefixPredicate

OrderMatchesFlagsAndPrefixPredicate --> FindOrderCommandParser : predicate
deactivate OrderMatchesFlagsAndPrefixPredicate

create FindOrderCommand
FindOrderCommandParser -> FindOrderCommand : FindOrderCommand(predicate)
activate FindOrderCommand

FindOrderCommand -> FindOrderCommandParser : command
deactivate FindOrderCommand

FindOrderCommandParser --> TrackOParser : command
deactivate FindOrderCommandParser

TrackOParser --> LogicManager : command
deactivate TrackOParser

destroy FindOrderCommandParser

LogicManager -> FindOrderCommand : execute(model)
activate FindOrderCommand

FindOrderCommand -> Model : updateFilteredOrderList(predicate);
activate Model
deactivate Model

create CommandResult
FindOrderCommand -> CommandResult
activate CommandResult

CommandResult --> FindOrderCommand : result
deactivate CommandResult

FindOrderCommand --> LogicManager : result
deactivate FindOrderCommand

[<--LogicManager

destroy FindOrderCommand
deactivate LogicManager
@enduml
