@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":SortTaskCommandParser" as SortTaskCommandParser LOGIC_COLOR
participant "st:SortTaskCommand" as SortTaskCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("t sort c/priority")
activate LogicManager

LogicManager -> AddressBookParser: parseCommand("t sort c/priority")
activate AddressBookParser

create SortTaskCommandParser
AddressBookParser -> SortTaskCommandParser
activate SortTaskCommandParser

SortTaskCommandParser --> AddressBookParser
deactivate SortTaskCommandParser

AddressBookParser -> SortTaskCommandParser: parse("c/priority")
activate SortTaskCommandParser

create SortTaskCommand
SortTaskCommandParser -> SortTaskCommand
activate SortTaskCommand

SortTaskCommand --> SortTaskCommandParser : st
deactivate SortTaskCommand

SortTaskCommandParser --> AddressBookParser : st
deactivate SortTaskCommandParser
SortTaskCommandParser [hidden]--> AddressBookParser
destroy SortTaskCommandParser

AddressBookParser --> LogicManager : st
deactivate AddressBookParser

LogicManager -> SortTaskCommand : execute(model)
activate SortTaskCommand

SortTaskCommand -> Model: sortTaskList(criteria)
activate Model

Model --> SortTaskCommand
deactivate Model

SortTaskCommand -> Model: getFilteredTaskList()
activate Model

Model --> SortTaskCommand
deactivate Model

create CommandResult
SortTaskCommand -> CommandResult: CommandResult(TASK_SORTED_SUCCESSFULLY)
activate CommandResult

CommandResult --> SortTaskCommand
deactivate CommandResult

SortTaskCommand --> LogicManager
deactivate SortTaskCommand
SortTaskCommand [hidden]--> LogicManager
destroy SortTaskCommand

[<--LogicManager
deactivate LogicManager

@enduml
